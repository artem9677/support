import telebot
from telebot import types
from datetime import datetime

# –¢–æ–∫–µ–Ω support-–±–æ—Ç–∞ (–æ—Ç @BotFather)
SUPPORT_BOT = telebot.TeleBot("8286157115:AAF7JNApuvIO2L9603NfBu9vgzcIgXL7ZF0")  # –ó–∞–º–µ–Ω–∏!

# –ê–¥–º–∏–Ω—ã (—Ç–µ –∂–µ, —á—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
ADMIN_IDS = [7339590336]

# –ë–∞–∑–∞ —Ç–∏–∫–µ—Ç–æ–≤: user_id -> list of {'type': 'message/call', 'content': str, 'date': str, 'ticket_id': str}
support_tickets = {}
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —à–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞)

def is_admin(user_id):
    return user_id in ADMIN_IDS

def generate_ticket_id():
    return datetime.now().strftime("%Y%m%d%H%M%S") + str(hash(str(datetime.now())))[-6:]

def add_ticket(user_id, ticket_type, content):
    if user_id not in support_tickets:
        support_tickets[user_id] = []
    date = datetime.now().strftime("%d %B, %H:%M")
    ticket_id = generate_ticket_id()
    support_tickets[user_id].append({'type': ticket_type, 'content': content, 'date': date, 'ticket_id': ticket_id})
    
    # –ü–æ–ª—É—á–∞–µ–º username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = SUPPORT_BOT.get_chat(user_id)
    user_name = f"@{user_info.username}" if user_info.username else user_info.first_name or str(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    for admin_id in ADMIN_IDS:
        text = f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}, Ticket: {ticket_id}):\n–¢–∏–ø: {ticket_type}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n–î–∞—Ç–∞: {date}"
        markup = types.InlineKeyboardMarkup()
        reply_btn = types.InlineKeyboardButton('üì© –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'reply_ticket_{ticket_id}_{user_id}')
        markup.add(reply_btn)
        SUPPORT_BOT.send_message(admin_id, text, reply_markup=markup)

@SUPPORT_BOT.message_handler(commands=['start'])
def support_start(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='write_message')
    btn2 = types.InlineKeyboardButton('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
    if is_admin(user_id):
        btn3 = types.InlineKeyboardButton('üëë –ê–¥–º–∏–Ω', callback_data='admin_panel')
    else:
        btn3 = types.InlineKeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    markup.add(btn1, btn2, btn3)
    text = f"üÜò <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n\n–≠—Ç–æ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
    sent_message = SUPPORT_BOT.send_message(message.chat.id, text, reply_markup=markup, parse_mode='HTML')
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ —á–∞—Ç–µ {message.chat.id} —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º ID {sent_message.message_id}")

@SUPPORT_BOT.message_handler(commands=['tickets'])
def show_tickets(message):
    user_id = message.from_user.id
    if user_id not in support_tickets or not support_tickets[user_id]:
        SUPPORT_BOT.reply_to(message, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return
    text = "üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n\n"
    for ticket in support_tickets[user_id][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        text += f"‚Ä¢ {ticket['date']} ({ticket['type']}): {ticket['content'][:50]}...\n"
    SUPPORT_BOT.reply_to(message, text, parse_mode='HTML')

@SUPPORT_BOT.callback_query_handler(func=lambda call: True)
def support_callback(call):
    user_id = call.from_user.id
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback –æ—Ç {user_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {call.data}")
    if call.data == 'write_message':
        user_states[user_id] = {'step': 'write_message'}
        SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        SUPPORT_BOT.edit_message_text("üìù –û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", call.message.chat.id, call.message.message_id)
    elif call.data == 'instructions':
        text = "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor:</b>\n\n" \
               "1. <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> –ù–∞–∂–º–∏—Ç–µ 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.\n" \
               "3. <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tickets, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n" \
               "4. <b>–î–ª—è –∞–¥–º–∏–Ω–æ–≤:</b> –ù–∞–∂–º–∏—Ç–µ 'üëë –ê–¥–º–∏–Ω', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n" \
               "‚ÑπÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å—Ä–æ—á–Ω–∞—è, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!"
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
        markup.add(back_btn)
        SUPPORT_BOT.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    elif call.data == 'settings' and not is_admin(user_id):
        text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã.\n‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π."
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
        markup.add(back_btn)
        SUPPORT_BOT.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    elif call.data == 'admin_panel' and is_admin(user_id):
        all_tickets = []
        for uid, tickets in support_tickets.items():
            for ticket in tickets:
                user_info = SUPPORT_BOT.get_chat(uid)
                user_name = f"@{user_info.username}" if user_info.username else user_info.first_name or str(uid)
                all_tickets.append((uid, ticket['ticket_id'], ticket['type'], ticket['content'], ticket['date'], user_name))

        if not all_tickets:
            SUPPORT_BOT.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.", call.message.chat.id, call.message.message_id)
            return

        markup = types.InlineKeyboardMarkup()
        for uid, ticket_id, ticket_type, content, date, user_name in all_tickets[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–∏–∫–µ—Ç–æ–≤
            btn = types.InlineKeyboardButton(f"{user_name} ({ticket_type}, {date[:5]})", callback_data=f"reply_{ticket_id}_{uid}")
            markup.add(btn)

        text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
        SUPPORT_BOT.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
    elif call.data == 'back_to_menu':
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='write_message')
        btn2 = types.InlineKeyboardButton('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
        if is_admin(user_id):
            btn3 = types.InlineKeyboardButton('üëë –ê–¥–º–∏–Ω', callback_data='admin_panel')
        else:
            btn3 = types.InlineKeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
        markup.add(btn1, btn2, btn3)
        text = f"üÜò <b>–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}!</b>\n\n–≠—Ç–æ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
        SUPPORT_BOT.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
        if user_id in user_states:
            del user_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    elif call.data.startswith('reply_ticket_'):
        if not is_admin(user_id):
            SUPPORT_BOT.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        _, ticket_id, user_to_reply = call.data.split('_')[1:]
        user_states[user_id] = {'step': 'admin_reply', 'ticket_id': ticket_id, 'user_id': user_to_reply}
        SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        SUPPORT_BOT.edit_message_text("üìù –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...", call.message.chat.id, call.message.message_id)
    elif call.data.startswith('reply_'):
        if not is_admin(user_id):
            SUPPORT_BOT.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        _, ticket_id, user_to_reply = call.data.split('_')
        user_states[user_id] = {'step': 'admin_reply', 'ticket_id': ticket_id, 'user_id': user_to_reply}
        SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        SUPPORT_BOT.edit_message_text("üìù –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...", call.message.chat.id, call.message.message_id)

@SUPPORT_BOT.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'write_message')
def handle_support_message(message):
    user_id = message.from_user.id
    content = message.text
    add_ticket(user_id, 'message', content)
    del user_states[user_id]
    SUPPORT_BOT.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@SUPPORT_BOT.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'admin_reply')
def handle_admin_response(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        SUPPORT_BOT.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    state = user_states[user_id]
    response = message.text
    user_to_reply = state['user_id']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    SUPPORT_BOT.send_message(user_to_reply, f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n{response}", parse_mode='HTML')

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
    SUPPORT_BOT.reply_to(message, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_to_reply}).")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@SUPPORT_BOT.message_handler(func=lambda m: True)
def handle_other_support(m):
    SUPPORT_BOT.reply_to(m, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.")

if __name__ == "__main__":
    print("üÜò Support-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    SUPPORT_BOT.infinity_polling()
