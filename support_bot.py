import telebot
from telebot import types
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω support-–±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω)
SUPPORT_BOT = telebot.TeleBot("8286157115:AAF7JNApuvIO2L9603NfBu9vgzcIgXL7ZF0")

# –ê–¥–º–∏–Ω—ã (—Ç–µ –∂–µ, —á—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
ADMIN_IDS = [7339590336]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏ - –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
support_tickets = {}
user_states = {}

def is_admin(user_id):
    return user_id in ADMIN_IDS

def generate_ticket_id():
    return datetime.now().strftime("%Y%m%d%H%M%S") + str(abs(hash(str(datetime.now()))))[-6:]

def add_ticket(user_id, ticket_type, content):
    try:
        if user_id not in support_tickets:
            support_tickets[user_id] = []
        
        date = datetime.now().strftime("%d %B, %H:%M")
        ticket_id = generate_ticket_id()
        
        support_tickets[user_id].append({
            'type': ticket_type, 
            'content': content, 
            'date': date, 
            'ticket_id': ticket_id
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            user_info = SUPPORT_BOT.get_chat(user_id)
            user_name = f"@{user_info.username}" if user_info.username else user_info.first_name or str(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            user_name = str(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            text = (f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}, Ticket: {ticket_id}):\n"
                   f"–¢–∏–ø: {ticket_type}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}\n–î–∞—Ç–∞: {date}")
            
            markup = types.InlineKeyboardMarkup()
            reply_btn = types.InlineKeyboardButton(
                'üì© –û—Ç–≤–µ—Ç–∏—Ç—å', 
                callback_data=f'reply_ticket_{ticket_id}_{user_id}'
            )
            markup.add(reply_btn)
            
            try:
                SUPPORT_BOT.send_message(admin_id, text, reply_markup=markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_ticket: {e}")

@SUPPORT_BOT.message_handler(commands=['start'])
def support_start(message):
    try:
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='write_message')
        btn2 = types.InlineKeyboardButton('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
        
        if is_admin(user_id):
            btn3 = types.InlineKeyboardButton('üëë –ê–¥–º–∏–Ω', callback_data='admin_panel')
        else:
            btn3 = types.InlineKeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
        
        markup.add(btn1, btn2, btn3)
        
        text = (f"üÜò <b>–ü—Ä–∏–≤–µ—Ç, {first_name}!</b>\n\n"
               "–≠—Ç–æ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")
        
        SUPPORT_BOT.send_message(
            message.chat.id, 
            text, 
            reply_markup=markup, 
            parse_mode='HTML'
        )
        logger.info(f"–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support_start: {e}")

@SUPPORT_BOT.message_handler(commands=['tickets'])
def show_tickets(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in support_tickets or not support_tickets[user_id]:
            SUPPORT_BOT.reply_to(message, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        
        text = "üìã <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n\n"
        for ticket in support_tickets[user_id][-5:]:
            text += f"‚Ä¢ {ticket['date']} ({ticket['type']}): {ticket['content'][:50]}...\n"
        
        SUPPORT_BOT.reply_to(message, text, parse_mode='HTML')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tickets: {e}")

@SUPPORT_BOT.callback_query_handler(func=lambda call: True)
def support_callback(call):
    try:
        user_id = call.from_user.id
        logger.info(f"Callback –æ—Ç {user_id}: {call.data}")
        
        if call.data == 'write_message':
            user_states[user_id] = {'step': 'write_message'}
            SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            SUPPORT_BOT.edit_message_text(
                "üìù –û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", 
                call.message.chat.id, 
                call.message.message_id
            )
            
        elif call.data == 'instructions':
            text = ("üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor:</b>\n\n"
                   "1. <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> –ù–∞–∂–º–∏—Ç–µ 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.\n"
                   "3. <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tickets, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n"
                   "4. <b>–î–ª—è –∞–¥–º–∏–Ω–æ–≤:</b> –ù–∞–∂–º–∏—Ç–µ 'üëë –ê–¥–º–∏–Ω', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
                   "‚ÑπÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å—Ä–æ—á–Ω–∞—è, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
            
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            markup.add(back_btn)
            
            SUPPORT_BOT.edit_message_text(
                text, 
                call.message.chat.id, 
                call.message.message_id, 
                reply_markup=markup, 
                parse_mode='HTML'
            )
            
        elif call.data == 'settings' and not is_admin(user_id):
            text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã.\n‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π."
            
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardMarkup('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu')
            markup.add(back_btn)
            
            SUPPORT_BOT.edit_message_text(
                text, 
                call.message.chat.id, 
                call.message.message_id, 
                reply_markup=markup, 
                parse_mode='HTML'
            )
            
        elif call.data == 'admin_panel' and is_admin(user_id):
            all_tickets = []
            for uid, tickets in support_tickets.items():
                for ticket in tickets:
                    try:
                        user_info = SUPPORT_BOT.get_chat(uid)
                        user_name = f"@{user_info.username}" if user_info.username else user_info.first_name or str(uid)
                    except:
                        user_name = str(uid)
                    
                    all_tickets.append((uid, ticket['ticket_id'], ticket['type'], 
                                      ticket['content'], ticket['date'], user_name))
            
            if not all_tickets:
                SUPPORT_BOT.edit_message_text(
                    "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.", 
                    call.message.chat.id, 
                    call.message.message_id
                )
                return
            
            markup = types.InlineKeyboardMarkup()
            for uid, ticket_id, ticket_type, content, date, user_name in all_tickets[-10:]:
                btn = types.InlineKeyboardButton(
                    f"{user_name} ({ticket_type}, {date[:10]})", 
                    callback_data=f"reply_{ticket_id}_{uid}"
                )
                markup.add(btn)
            
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
            SUPPORT_BOT.edit_message_text(
                text, 
                call.message.chat.id, 
                call.message.message_id, 
                reply_markup=markup, 
                parse_mode='HTML'
            )
            
        elif call.data == 'back_to_menu':
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn1 = types.InlineKeyboardButton('üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='write_message')
            btn2 = types.InlineKeyboardButton('üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
            
            if is_admin(user_id):
                btn3 = types.InlineKeyboardButton('üëë –ê–¥–º–∏–Ω', callback_data='admin_panel')
            else:
                btn3 = types.InlineKeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
            
            markup.add(btn1, btn2, btn3)
            
            text = (f"üÜò <b>–ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}!</b>\n\n"
                   "–≠—Ç–æ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Trade Guarantor. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")
            
            SUPPORT_BOT.edit_message_text(
                text, 
                call.message.chat.id, 
                call.message.message_id, 
                reply_markup=markup, 
                parse_mode='HTML'
            )
            
            if user_id in user_states:
                del user_states[user_id]
                
        elif call.data.startswith('reply_ticket_'):
            if not is_admin(user_id):
                SUPPORT_BOT.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return
            
            parts = call.data.split('_')
            if len(parts) >= 4:
                ticket_id = parts[2]
                user_to_reply = parts[3]
                
                user_states[user_id] = {
                    'step': 'admin_reply', 
                    'ticket_id': ticket_id, 
                    'user_id': user_to_reply
                }
                
                SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
                SUPPORT_BOT.edit_message_text(
                    "üìù –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...", 
                    call.message.chat.id, 
                    call.message.message_id
                )
                
        elif call.data.startswith('reply_'):
            if not is_admin(user_id):
                SUPPORT_BOT.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return
            
            parts = call.data.split('_')
            if len(parts) >= 3:
                ticket_id = parts[1]
                user_to_reply = parts[2]
                
                user_states[user_id] = {
                    'step': 'admin_reply', 
                    'ticket_id': ticket_id, 
                    'user_id': user_to_reply
                }
                
                SUPPORT_BOT.answer_callback_query(call.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
                SUPPORT_BOT.edit_message_text(
                    "üìù –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...", 
                    call.message.chat.id, 
                    call.message.message_id
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ support_callback: {e}")
        SUPPORT_BOT.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@SUPPORT_BOT.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'write_message')
def handle_support_message(message):
    try:
        user_id = message.from_user.id
        content = message.text
        
        add_ticket(user_id, 'message', content)
        
        if user_id in user_states:
            del user_states[user_id]
        
        SUPPORT_BOT.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_support_message: {e}")

@SUPPORT_BOT.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'admin_reply')
def handle_admin_response(message):
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            SUPPORT_BOT.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        state = user_states.get(user_id, {})
        response = message.text
        user_to_reply = state.get('user_id')
        
        if not user_to_reply:
            SUPPORT_BOT.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SUPPORT_BOT.send_message(
            user_to_reply, 
            f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n{response}", 
            parse_mode='HTML'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        SUPPORT_BOT.reply_to(message, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_to_reply}).")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states:
            del user_states[user_id]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_response: {e}")

@SUPPORT_BOT.message_handler(func=lambda m: True)
def handle_other_support(m):
    SUPPORT_BOT.reply_to(m, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.")

if __name__ == "__main__":
    logger.info("üÜò Support-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        SUPPORT_BOT.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
