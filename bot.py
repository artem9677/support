import telebot
from telebot import types
import random
import string
from datetime import datetime  # –î–ª—è –¥–∞—Ç –≤ —Ç–∏–∫–µ—Ç–∞—Ö

bot = telebot.TeleBot("8320945675:AAGodPII1I5IBOKYBx_adZFecYsv9-sw1d4")  # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
ADMIN_IDS = [7339590336]  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–ï–õ–ï–ì–†–ê–ú ID

# –¢–æ–∫–µ–Ω support-–±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç @BotFather –¥–ª—è @TradeSupportBot)
SUPPORT_BOT_TOKEN = "8286157115:AAF7JNApuvIO2L9603NfBu9vgzcIgXL7ZF0"  # –°–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users_balance = {}  # –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> balance
deals_db = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏: deal_id -> deal_info
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> state_data
support_tickets = {}  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: user_id -> list of {'type': str, 'content': str, 'date': str}

def is_admin(user_id):
    return user_id in ADMIN_IDS

def generate_deal_id():
    return ''.join(random.choices(string.digits, k=6))

def generate_deal_link(deal_id):
    bot_username = bot.get_me().username
    return f"https://t.me/{bot_username}?start=deal_{deal_id}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id, user_id):
    first_name = bot.get_chat(user_id).first_name
    welcome_text = (
        f"üåü <b>–ü—Ä–∏–≤–µ—Ç</b>, {first_name}!\n"
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –≥–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n"
        "<b>Trade Guarantor</b> ‚Äî —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–±–µ–∑–æ–ø–∞—Å–Ω–æ</b> –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ –ø–æ–∫—É–ø–∞—Ç—å –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º <b>–∑–∞—â–∏—Ç—É –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω</b>, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ <b>–±—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã</b>.\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "<b>üíº –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
        "‚ñ´Ô∏è –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏\n"
        "‚ñ´Ô∏è –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã\n"
        "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        "‚ñ´Ô∏è –ü–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('üõí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏', callback_data='active_deals')
    btn2 = types.InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', callback_data='create_deal')
    btn3 = types.InlineKeyboardButton('üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
    btn4 = types.InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help')
    btn_support = types.InlineKeyboardButton('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/TradeGuarantorSupportBot')
    markup.add(btn1, btn2, btn3, btn4, btn_support)

    try:
        with open('welcome_image.jpg', 'rb') as photo:
            bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=welcome_text,
                reply_markup=markup,
                parse_mode='HTML'
            )
    except FileNotFoundError:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. " + welcome_text,
            reply_markup=markup,
            parse_mode='HTML'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query
@bot.callback_query_handler(func=lambda call: call.data == 'active_deals')
def process_active_deals(call):
    show_active_deals(call.message.chat.id, call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'create_deal')
def process_create_deal(call):
    create_deal_start(call.message.chat.id, call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'my_profile')
def process_my_profile(call):
    show_profile(call.message.chat.id, call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def process_help(call):
    show_help(call.message.chat.id, call.from_user.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency = call.data.split('_')[1]

    if user_id not in user_states or 'description' not in user_states[user_id]:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    deal_id = generate_deal_id()
    deals_db[deal_id] = {
        "description": user_states[user_id]['description'],
        "amount": user_states[user_id]['amount'],
        "currency": currency,
        "status": "active",
        "seller_id": user_id,
        "buyer_id": None
    }

    del user_states[user_id]

    deal_link = generate_deal_link(deal_id)
    deal_info = (
        "‚úÖ –°–î–ï–õ–ö–ê –°–û–ó–î–ê–ù–ê!\n\n"
        f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deals_db[deal_id]['description']}\n"
        f"‚ñ´Ô∏è –°—É–º–º–∞: {deals_db[deal_id]['amount']} {currency}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n"
        f"{deal_link}\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
    )

    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
    markup.add(back_btn)
    bot.send_message(call.message.chat.id, deal_info, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment_confirmation(call):
    deal_id = call.data.split('_')[1]
    user_id = call.from_user.id

    if deal_id not in deals_db:
        bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    deal = deals_db[deal_id]

    if deal['status'] != 'active':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    deal['status'] = 'waiting_delivery'
    deal['buyer_id'] = user_id

    try:
        bot.send_message(
            deal['seller_id'],
            f"üí∞ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –û–ü–õ–ê–¢–ò–õ –°–î–ï–õ–ö–£ #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n\n"
            "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
        )
    except:
        pass

    markup = types.InlineKeyboardMarkup()
    received_btn = types.InlineKeyboardButton(
        text="üì¶ –Ø –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑",
        callback_data=f"received_{deal_id}"
    )
    back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
    markup.add(received_btn, back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=call.message.text + "\n\n‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–ø–ª–∞—Ç–µ")

@bot.callback_query_handler(func=lambda call: call.data.startswith('received_'))
def handle_goods_received(call):
    deal_id = call.data.split('_')[1]
    user_id = call.from_user.id

    if deal_id not in deals_db:
        bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    deal = deals_db[deal_id]

    if deal['status'] != 'waiting_delivery':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        return

    if user_id != deal['buyer_id']:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ")
        return

    deal['status'] = 'completed'

    if user_id not in users_balance:
        users_balance[user_id] = 0
    users_balance[deal['seller_id']] += deal['amount']

    seller_info = bot.get_chat(deal['seller_id'])
    seller_name = f"@{seller_info.username}" if seller_info.username else seller_info.first_name or str(deal['seller_id'])
    buyer_info = bot.get_chat(user_id)
    buyer_name = f"@{buyer_info.username}" if buyer_info.username else buyer_info.first_name or str(user_id)

    try:
        bot.send_message(
            deal['seller_id'],
            f"üéâ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –ü–û–õ–£–ß–ò–õ –¢–û–í–ê–† –ü–û –°–î–ï–õ–ö–ï #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: +{deal['amount']} {deal['currency']}\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[deal['seller_id']]} {deal['currency']}"
        )
    except:
        pass

    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"üîî –ù–û–í–ê–Ø –ó–ê–í–ï–†–®–Å–ù–ù–ê–Ø –°–î–ï–õ–ö–ê #{deal_id}\n\n"
                f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
                f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
                f"‚ñ´Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
                f"‚ñ´Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_name}\n"
                f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
            )
        except:
            pass

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=call.message.text + "\n\n‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–¥–µ–ª–∫—É!",
        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
    )
    bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–ª—É—á–µ–Ω–∏–∏")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def process_back_to_menu(call):
    show_main_menu(call.message.chat.id, call.from_user.id)
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if len(message.text.split()) > 1:
        deal_param = message.text.split()[1]
        if deal_param.startswith('deal_'):
            deal_id = deal_param.split('_')[1]
            if deal_id in deals_db:
                show_deal_info(message, deal_id)
                return
    show_main_menu(message.chat.id, user_id)

def show_deal_info(message, deal_id):
    if deal_id not in deals_db:
        bot.reply_to(message, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    deal = deals_db[deal_id]
    user_id = message.from_user.id

    if deal['status'] == 'completed':
        bot.reply_to(message, "‚úÖ –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    if user_id != deal['seller_id']:
        payment_info = (
            f"üõí –°–î–ï–õ–ö–ê #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü: —Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            "2200 7342 8532 5543\n–°–±–µ—Ä–±–∞–Ω–∫\n–ö—Ä–∞—á–∫–æ –ê.–î.\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )

        markup = types.InlineKeyboardMarkup()
        pay_btn = types.InlineKeyboardButton(
            text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
            callback_data=f"pay_{deal_id}"
        )
        back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
        markup.add(pay_btn, back_btn)

        bot.send_message(
            message.chat.id,
            payment_info,
            reply_markup=markup
        )
    else:
        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if deal['status'] == 'active' else "üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
        deal_info = (
            f"üì¶ –í–ê–®–ê –°–î–ï–õ–ö–ê #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n"
            f"{generate_deal_link(deal_id)}\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
        )

        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
        markup.add(back_btn)
        bot.send_message(message.chat.id, deal_info, reply_markup=markup)

def create_deal_start(chat_id, user_id):
    user_states[user_id] = {"step": "deal_description"}
    bot.send_message(
        chat_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏:"
    )

@bot.message_handler(func=lambda message: message.text == '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def create_deal_start_old(message):
    user_id = message.from_user.id
    user_states[user_id] = {"step": "deal_description"}
    bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏:"
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'deal_description')
def handle_deal_description(message):
    user_id = message.from_user.id
    description = message.text

    user_states[user_id] = {
        "step": "deal_amount",
        "description": description
    }

    bot.send_message(
        message.chat.id,
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n\n"
        "–ü—Ä–∏–º–µ—Ä: 15000"
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'deal_amount')
def handle_deal_amount(message):
    user_id = message.from_user.id

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        user_states[user_id]['amount'] = amount

        markup = types.InlineKeyboardMarkup(row_width=3)
        btn_rub = types.InlineKeyboardButton("RUB", callback_data="currency_RUB")
        btn_kzt = types.InlineKeyboardButton("KZT", callback_data="currency_KZT")
        btn_uah = types.InlineKeyboardButton("UAH", callback_data="currency_UAH")
        markup.add(btn_rub, btn_kzt, btn_uah)

        bot.send_message(
            message.chat.id,
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:",
            reply_markup=markup
        )

    except:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è")

def show_profile(chat_id, user_id):
    user_info = bot.get_chat(user_id)
    first_name = user_info.first_name
    if user_id not in users_balance:
        users_balance[user_id] = 0

    user_deals_as_seller = sum(1 for d in deals_db.values() if d.get('seller_id') == user_id and d.get('status') == 'completed')
    user_deals_as_buyer = sum(1 for d in deals_db.values() if d.get('buyer_id') == user_id and d.get('status') == 'completed')

    info_text = (
        f"üë§ –ü–†–û–§–ò–õ–¨: {first_name}\n\n"
        f"‚ñ´Ô∏è –í–∞—à ID: {user_id}\n"
        f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å: {users_balance[user_id]} RUB\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üì¶ –°–¥–µ–ª–æ–∫ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: {user_deals_as_seller}\n"
        f"üõí –°–¥–µ–ª–æ–∫ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_deals_as_buyer}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üí∏ –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /withdraw"
    )

    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
    markup.add(back_btn)
    bot.send_message(chat_id, info_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile_old(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    if user_id not in users_balance:
        users_balance[user_id] = 0

    user_deals_as_seller = sum(1 for d in deals_db.values() if d.get('seller_id') == user_id and d.get('status') == 'completed')
    user_deals_as_buyer = sum(1 for d in deals_db.values() if d.get('buyer_id') == user_id and d.get('status') == 'completed')

    info_text = (
        f"üë§ –ü–†–û–§–ò–õ–¨: {first_name}\n\n"
        f"‚ñ´Ô∏è –í–∞—à ID: {user_id}\n"
        f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å: {users_balance[user_id]} RUB\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üì¶ –°–¥–µ–ª–æ–∫ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü: {user_deals_as_seller}\n"
        f"üõí –°–¥–µ–ª–æ–∫ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_deals_as_buyer}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üí∏ –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /withdraw"
    )

    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')
    markup.add(back_btn)
    bot.send_message(message.chat.id, info_text, reply_markup=markup)

def show_active_deals(chat_id, user_id):
    active = []
    for deal_id, deal in deals_db.items():
        if deal['status'] in ['active', 'waiting_delivery']:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if deal['status'] == 'active' else "üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
            active.append(f"‚ñ´Ô∏è #{deal_id} - {deal['description']} - {deal['amount']} {deal['currency']} ({status})")

    if not active:
        bot.send_message(chat_id, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))
        return

    deals_text = (
            "üÜï –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò\n\n" +
            "\n".join(active) +
            "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )

    bot.send_message(chat_id, deals_text, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

@bot.message_handler(func=lambda message: message.text == 'üõí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏')
def show_active_deals_old(message):
    active = []
    for deal_id, deal in deals_db.items():
        if deal['status'] in ['active', 'waiting_delivery']:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if deal['status'] == 'active' else "üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
            active.append(f"‚ñ´Ô∏è #{deal_id} - {deal['description']} - {deal['amount']} {deal['currency']} ({status})")

    if not active:
        bot.reply_to(message, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))
        return

    deals_text = (
            "üÜï –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò\n\n" +
            "\n".join(active) +
            "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )

    bot.send_message(message.chat.id, deals_text, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

@bot.message_handler(commands=['withdraw'])
def handle_withdraw(message):
    user_id = message.from_user.id
    if user_id not in users_balance:
        users_balance[user_id] = 0

    if users_balance[user_id] <= 0:
        bot.reply_to(message, "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))
        return

    user_states[user_id] = {"step": "withdraw_details", "amount": users_balance[user_id]}
    bot.send_message(
        message.chat.id,
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ {users_balance[user_id]} RUB:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –°–±–µ—Ä–±–∞–Ω–∫ 2200 7000 8000 5500"
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'withdraw_details')
def handle_withdraw_details(message):
    user_id = message.from_user.id
    details = message.text

    amount = user_states[user_id]['amount']
    users_balance[user_id] = 0

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î {amount} RUB –û–¢–ü–†–ê–í–õ–ï–ù!\n\n"
        f"‚ñ´Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã: {details}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
    )

    del user_states[user_id]

@bot.message_handler(commands=['add_balance'])
def handle_add_balance(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError

        target_user_id = int(parts[1])
        amount = float(parts[2])

        if target_user_id not in users_balance:
            users_balance[target_user_id] = 0

        users_balance[target_user_id] += amount

        bot.reply_to(message, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

    except:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_balance <user_id> <amount>", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

def show_help(chat_id, user_id):
    help_text = (
        "‚ÑπÔ∏è –ö–û–ú–ê–ù–î–´ –ò –ò–ù–°–¢–†–£–ö–¶–ò–Ø\n\n"
        "‚ñ´Ô∏è /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /withdraw - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚ñ´Ô∏è -----------------------)\n\n"
        "üõí –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n"
        "5. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º\n\n"
        "üí∞ –ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "4. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑'\n\n"
        "üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    )

    bot.send_message(chat_id, help_text, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help_old(message):
    help_text = (
        "‚ÑπÔ∏è –ö–û–ú–ê–ù–î–´ –ò –ò–ù–°–¢–†–£–ö–¶–ò–Ø\n\n"
        "‚ñ´Ô∏è /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /withdraw - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚ñ´Ô∏è -----------------------)\n\n"
        "üõí –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n"
        "5. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º\n\n"
        "üí∞ –ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "4. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑'\n\n"
        "üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
    )

    bot.reply_to(message, help_text, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

@bot.message_handler(func=lambda m: True)
def handle_other(message):
    text = message.text.lower()

    if text in ['–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello']:
        bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_to_menu')))

if __name__ == "__main__":
    print("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    bot.infinity_polling()
